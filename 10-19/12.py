# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The 
# first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred 
# divisors?

import math

def get_triangle_number(n):
    return sum(range(0,n + 1))

def has_divisors_over(i,n):
    divisors = []

    for d in range(1, int(math.sqrt(i)) + 1):
        if i % d == 0:
            divisors.append(d)
            divisors.append(i / d)

            if len(divisors) > n:
                return True

    return len(divisors) > n

def get_first_triangle_with_divisors_over(n):
    divisors_over = False
    triangle_index = 1
    triangle_num = None

    while divisors_over is False:
        triangle_num = get_triangle_number(triangle_index)

        divisors_over = has_divisors_over(triangle_num, n)

        triangle_index += 1

    return triangle_num

print(get_first_triangle_with_divisors_over(500))